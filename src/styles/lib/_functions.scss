//********* Mixins **************/


@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin horizontalAlign{
  position: relative;
  left: 50%;
  @include transform(translateX(-50%));
}

@mixin verticalAlign{
  position: relative;
  top: 50%;
  @include transform(translateY(-50%));
}

@mixin horizontalVerticalAlign{
  position: relative;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}
  //Animation stuff -- see " http://joshbroton.com/quick-fix-sass-mixins-for-css-keyframe-animations/" for documentation
@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
    $animations: #{$animations + nth($animate, $i)};

    @if $i < $max {
      $animations: #{$animations + ", "};
    }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
    @content;
  }
  @-moz-keyframes #{$animationName} {
    @content;
  }
  @-o-keyframes #{$animationName} {
    @content;
  }
  @keyframes #{$animationName} {
    @content;
  }
}

@mixin transition($transition-property, $transition-time, $method) {
  -webkit-transition: $transition-property $transition-time $method;
  -moz-transition: $transition-property $transition-time $method;
  -ms-transition: $transition-property $transition-time $method;
  -o-transition: $transition-property $transition-time $method;
  transition: $transition-property $transition-time $method;
}
  //End animation stuff

//*********** Size calculations *************/

//$specs takes width, height, left, top  $margin takes a margin size in percent

//Parents have children divs arranged in two or more rows
@mixin parent($specs, $border) {
  //Dimensions and position with edge case of div being at edge of screen
  width: nth($specs, 1);
  height: nth($specs, 2)-($border);
  left: nth($specs, 3);
  top: nth($specs, 4);

  //Sets margin with exception for divs touching top or bottom -- right is taken care of by children, top and left is taken care of by other parents
//  margin-bottom: $border;
//    @if (nth($specs,2) + nth($specs,4) > 98% ) or (nth($specs,1)+ nth($specs, 3) > 98%) {
//      margin-bottom: 0;
//      width: nth($specs, 1);
//    }
  position: absolute;
}

// A widow is a parent with no children
@mixin widow($specs, $border) {
  $widow-specs: nth($specs, 1)-$border, nth($specs, 2), nth($specs, 3), nth($specs, 4);

  @include parent($widow-specs, $border)
}


//N.B. Both vertical and horizontal margins are calculated as a percent of their parent's WIDTH
@mixin child($specs, $parent-specs, $border) {
  $calc-border: /*2**/ ($border / (nth($parent-specs, 1))) *100%;

  width: parent-context(nth($specs, 1), nth($parent-specs, 1)) - $calc-border;//(2*($border / (nth($parent-specs, 1))) *100%);
  height:parent-context(nth($specs, 2), nth($parent-specs, 2)) ;//-  $calc-border;//(2*($border / (nth($parent-specs, 1))) *100%);
  margin: $calc-border;
  margin-top: 0;
  margin-left: 0;
}
//width: parent ratio * width - ( double border / parent ratio as a decimal)
//height: parent ratio * height - ( double border / parent ratio as a decimal)

@function parent-context($child, $parent){
  @return ($child / $parent) * 100%;
}

//************ Category Colour Function *************/
$categoryColours: $category1, $category2, $category3, $category4;
//If darkening is desired, use negative value.
$categoryLightening: percentage(0), percentage(-0.1), percentage(0.05), percentage(0.10);

$categoryCount: 60;
$colourSet: $categoryColours;
//List of different lighten values to pass into lighten().  Negative values allow darkening.
$tintSet: $categoryLightening;


//Allows use of lighten() with a negative value
@function tint($colour, $lighten){
  @if $lighten == 0%{
    @return $colour;
  }
  @else if $lighten < 0{
//    @debug $colour;
//    @debug darken($colour, abs($lighten));
    @return darken($colour, abs($lighten))
  }
  @else {
//    @debug $colour;
//    @debug lighten($colour, $lighten);
    @return lighten($colour, $lighten)
  }
}

@mixin generateCategoryColours ($categoryCount, $colourSet, $tintSet){
  $tint-counter: 0;
  $colour-counter: 0;

  @for $cat from 0 through $categoryCount{
    .h-cat-#{$cat+1}, .h-cat-#{$cat+1}-item{


//      @debug $tint-counter, $colour-counter;

      $colour: nth($colourSet, (1 + ($colour-counter % length($colourSet)))); //Resets to first colour once all have been used
      $colour-counter: $colour-counter + 1;

      $tint: nth($tintSet, (1+ ($tint-counter % length($tintSet)))); //Resets to first tint once all have been used
      @if $colour-counter % length($colourSet) == 0 {  //If we have gone through the full set of colours
@debug $tint;
//@debug "Tint incremented";
        $tint-counter: $tint-counter + 1;
      }
      background-color: tint($colour, $tint); //Set tinted colour
    }
  }

  $tint-counter: 0;
  $colour-counter: 0;

  @for $cat from 0 through $categoryCount{
    .h-cat-#{$cat+1}-item.body{


      @debug $tint-counter, $colour-counter;

      $colour: nth($colourSet, (1 + ($colour-counter % length($colourSet)))); //Resets to first colour once all have been used
      $colour-counter: $colour-counter + 1;

      $tint: nth($tintSet, (1+ ($tint-counter % length($tintSet)))) - 10 ; //Resets to first tint once all have been used
      @if $colour-counter % length($colourSet) == 0 {  //If we have gone through the full set of colours
        @debug "Tint incremented";
        $tint-counter: $tint-counter + 1;
      }
      background-color: tint($colour, ($tint)); //Set tinted colour
    }
  }


//  @for $i from 0 through $categoryCount{
//    .h-cat-#{$i+1}-item.body{
//      $j: $i % (length($colourSet) * length($tintSet)); //Resets $j after total number of possible repetitions have been completed
//
//      $colour: nth($colourSet, (1 + ($j % length($colourSet)))); //Make each colour happen once for each tint
//      $tint: nth($tintSet, (1+ ($j % length($tintSet)))); //Make each tint hapen once for each colour
//
//      background-color: tint($colour, ($tint - 10)); //Set tinted colour
//    }
//  }
};